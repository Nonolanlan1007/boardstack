generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model board_cards {
  id          String  @id @db.Char(36)
  title       String  @db.VarChar(255)
  description String? @db.LongText
  parent_list String  @db.Char(36)
  position    Int
  created_by  String  @db.VarChar(36)
  assigned_to String? @db.VarChar(36)

  lists         board_lists     @relation(fields: [parent_list], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "board_cards_parent_list_foreign")
  labels        card_labels[]
  activity_logs activity_logs[]

  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)

  @@index([parent_list], map: "board_cards_parent_list_foreign")
}

model board_invitations {
  id           String @id @db.Char(36)
  email        String @db.VarChar(255)
  parent_board String @db.VarChar(255)
  created_by   String @db.Char(36)
  role         String @db.Char(6)

  boards boards @relation(fields: [parent_board], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "board_invitations_parent_board_foreign")

  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)

  @@index([parent_board], map: "board_invitations_parent_board_foreign")
}

model board_labels {
  id           String @id @db.Char(36)
  label        String @db.VarChar(255)
  color        String @db.VarChar(255)
  created_by   String @db.VarChar(255)
  parent_board String @db.Char(36)

  boards      boards        @relation(fields: [parent_board], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "board_labels_parent_board_foreign")
  card_labels card_labels[]

  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)

  @@index([parent_board], map: "board_labels_parent_board_foreign")
}

model board_lists {
  id              String  @id @db.Char(36)
  title           String  @db.VarChar(255)
  position        Int
  created_by      String  @db.VarChar(255)
  hide_when_blank Boolean @default(false)
  parent_board    String  @db.Char(36)

  cards  board_cards[]
  boards boards        @relation(fields: [parent_board], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "board_lists_parent_board_foreign")

  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)

  @@index([parent_board], map: "board_lists_parent_board_foreign")
}

model board_members {
  id           String @id @db.Char(36)
  parent_board String @db.Char(36)
  user_id      String @db.Char(36)
  role         String @db.VarChar(255)

  boards boards @relation(fields: [parent_board], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "board_members_parent_board_foreign")
  users  users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "board_members_user_id_foreign")

  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)

  @@index([parent_board], map: "board_members_parent_board_foreign")
  @@index([user_id], map: "board_members_user_id_foreign")
}

model boards {
  id                 String  @id @db.Char(36)
  owner_id           String  @db.Char(36)
  title              String  @db.VarChar(255)
  description        String? @db.Text
  background         String  @db.VarChar(255)
  background_type    String  @db.VarChar(255)
  background_credits String? @db.VarChar(255)

  invitations   board_invitations[]
  labels        board_labels[]
  lists         board_lists[]
  members       board_members[]
  owner         users               @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "boards_owner_id_foreign")
  activity_logs activity_logs[]

  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)

  @@index([owner_id], map: "boards_owner_id_foreign")
}

model card_labels {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  card_id  String @db.Char(36)
  label_id String @db.VarChar(255)

  cards  board_cards  @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "card_labels_card_id_foreign")
  labels board_labels @relation(fields: [label_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "card_labels_label_id_foreign")

  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)

  @@unique([card_id, label_id], map: "card_labels_card_id_label_id_unique")
  @@index([label_id], map: "card_labels_label_id_foreign")
}

model users {
  id        String @id @db.Char(36)
  full_name String @db.VarChar(255)
  email     String @unique(map: "users_email_unique") @db.VarChar(254)
  password  String @db.VarChar(255)

  board_members board_members[]
  boards        boards[]
  activity_logs activity_logs[]

  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)
}

model activity_logs {
  id              String  @id @db.Char(36)
  parent_board_id String? @db.Char(36)
  parent_card_id  String? @db.Char(36)
  action          String  @db.VarChar(255)
  created_by      String  @db.Char(36)
  old_value       String?
  new_value       String?
  linked_value    String?

  parent_board boards?      @relation(fields: [parent_board_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  parent_card  board_cards? @relation(fields: [parent_card_id], references: [id], onDelete: SetNull, onUpdate: Restrict)
  user         users        @relation(fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Restrict)

  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)
}
